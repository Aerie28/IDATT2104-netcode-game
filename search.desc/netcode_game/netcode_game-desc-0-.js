searchState.loadedDescShard("netcode_game", 0, "Analyzes performance metrics under different network …\nRepresents performance metrics for a network condition\nCompletes the current test and calculates performance …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the results of the performance tests\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the current test is complete based on elapsed …\nCreates a new PerformanceAnalyzer with predefined network …\nRecords a prediction error for the current network …\nResets the analyzer to start a new test\nCreates a new PerformanceAnalyzer with a custom set of …\nBackground/UI colors\nPlayer colors\nReturns a vector of all player colors as a palette\nConfiguration for the game window\nConstants for the board\nConstants for server\nConstants for network\nConstants for inputs from players\nConstants for the game state\nNew constants for improved interpolation\nConstants for the player\nConstants for performance testing\nConstants for the game state\nConstants for window size\nGame state that tracks all players and their positions, …\nStores state for one player\nGet player address of active player\nBuild a snapshot of active players for broadcasting\nHandles new connection by adding player at random pos/color\nRemove player on disconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nMutable access to players (use only when necessary)\nHandle player input and update position + activity\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Game instance\nMarks players inactive if timeout exceeded\nInput handler for managing player inputs and network …\nReturns the argument unchanged.\nHandles player input and applies prediction logic\nInput keys for selector input\nCalls <code>U::from(self)</code>.\nCreates a new InputHandler with default settings\nRepresents a position with a timestamp and sequence number …\nFunction to add a new position to the history\nReturns the argument unchanged.\nFunction to get the interpolated position based on the …\nCalls <code>U::from(self)</code>.\nCreates a new InterpolationState with default values\nNetwork client that handles sending and receiving messages …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new NetworkClient bound to the specified server …\nConnects to the server by sending a connect message\nSends a player input message with the specified input\nSends a ping message with the current timestamp\nTries to receive a client message from the server\nTries to receive a game state snapshot from the server\nRepresents the state of player movement prediction and …\nAdds a prediction input to the pending inputs queue\nReturns the argument unchanged.\nGets error in prediction by comparing the last confirmed …\nCalls <code>U::from(self)</code>.\nCreates a new PredictionState with the initial position\nReapplies all pending inputs to the current position\nReconciles the client state with the server state\nRenderer for the game, responsible for drawing the game …\nClears the screen with a black background\nDraws the player at the specified position with the given …\nDraws the toolbar with network stats and controls\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new Renderer instance\nRepresents the dimensions of the game board\nRepresents messages sent from the server to the client\nRepresents directions for player movement\nRepresents the state of the game, including players and …\nRepresents a position with an associated timestamp and …\nRepresents a network condition for simulating latency and …\nRepresents player input with direction, sequence number, …\nRepresents a player’s position in the game world\nRepresents a snapshot of a player’s position at a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")